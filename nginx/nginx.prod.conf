user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules for SSL and security
load_module modules/ngx_http_ssl_module.so;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 65535;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format with security information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$ssl_protocol/$ssl_cipher"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer sizes
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    client_max_body_size 20M;
    large_client_header_buffers 4 8k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL session cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;
    
    # SSL stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # DH parameters for perfect forward secrecy
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # OCSP stapling
    ssl_trusted_certificate /etc/nginx/ssl/ca-certs.pem;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Map for real IP detection
    map $http_x_forwarded_for $real_ip {
        ~^(\d+\.\d+\.\d+\.\d+) $1;
        default $remote_addr;
    }
    
    # Security headers map
    map $sent_http_content_type $csp_policy {
        default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' wss: https://api.stripe.com https://oceanshoppingcenter.com; object-src 'none'; media-src 'self'; child-src 'none'; worker-src 'self' blob:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';";
        ~text/html "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' wss: https://api.stripe.com https://oceanshoppingcenter.com; object-src 'none'; media-src 'self'; child-src 'none'; worker-src 'self' blob:; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests;";
    }
    
    # HTTP to HTTPS redirect server
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security headers even for redirects
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }
    
    # Main HTTPS server block
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name oceanshoppingcenter.com www.oceanshoppingcenter.com;
        root /usr/share/nginx/html;
        index index.html;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/oceanshoppingcenter.com.crt;
        ssl_certificate_key /etc/nginx/ssl/oceanshoppingcenter.com.key;
        
        # Access logs with security information
        access_log /var/log/nginx/access.log security;
        error_log /var/log/nginx/error.log warn;
        
        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        
        # Comprehensive Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $csp_policy always;
        add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header Clear-Site-Data "cache,cookies,storage,executionContexts" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "same-site" always;
        
        # Remove server version exposure
        more_clear_headers Server;
        more_clear_headers X-Powered-By;
        
        # Rate limiting for general requests
        limit_req zone=general burst=50 nodelay;
        
        # Handle React Router - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
            
            # Additional security for HTML files
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
                add_header Pragma "no-cache";
            }
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                
                # Security headers for assets
                add_header X-Content-Type-Options "nosniff" always;
                add_header Cross-Origin-Resource-Policy "cross-origin" always;
                
                # Pre-compressed files support
                gzip_static on;
            }
        }
        
        # API proxy with enhanced security and rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Enhanced proxy headers for security
            proxy_pass http://backend:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Request-ID $request_id;
            proxy_cache_bypass $http_upgrade;
            
            # Hide backend server information
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Security: Block certain request methods
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$ ) {
                return 405;
            }
        }
        
        # WebSocket proxy with security
        location /ws/ {
            access_log /var/log/nginx/websocket.log security;
            
            proxy_pass http://backend:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # WebSocket security headers
            proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
        }
        
        # Enhanced authentication endpoints with stricter rate limiting
        location ~ ^/api/auth/(login|register)$ {
            limit_req zone=login burst=5 nodelay;
            
            # Log authentication attempts
            access_log /var/log/nginx/auth.log security;
            
            proxy_pass http://backend:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Additional security for auth endpoints
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }
        
        # Payment endpoint security
        location ~ ^/api/payment/ {
            # Stricter rate limiting for payment endpoints
            limit_req zone=api burst=10 nodelay;
            
            # Log all payment requests
            access_log /var/log/nginx/payment.log security;
            
            proxy_pass http://backend:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Enhanced security for payment processing
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
        }
        
        # Admin endpoints with extra security
        location ~ ^/api/admin/ {
            # Very strict rate limiting for admin endpoints
            limit_req zone=login burst=3 nodelay;
            
            # Log all admin requests
            access_log /var/log/nginx/admin.log security;
            
            # Additional IP restrictions can be added here
            # allow 10.0.0.0/8;
            # allow 192.168.0.0/16;
            # allow 172.16.0.0/12;
            # deny all;
            
            proxy_pass http://backend:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
        }
        
        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }
        
        # Security: Block access to sensitive files and directories
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ /\.(?:htaccess|htpasswd|ini|phps?|sh|sql|conf|config|yml|yaml|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block common attack patterns
        location ~* /(wp-admin|wp-login|admin|administrator|phpmyadmin|mysql|sql|database)/ {
            deny all;
            access_log off;
            log_not_found off;
            return 444;
        }
        
        # Block bad bots and crawlers
        location ~* (crawl|spider|bot|scan|hack|exploit)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 444;
        }
        
        # Health check endpoint (internal access only)
        location /health {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status endpoint (internal access only)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Favicon handling
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # Robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
            expires 30d;
            add_header Cache-Control "public";
        }
        
        # Security.txt for responsible disclosure
        location = /.well-known/security.txt {
            log_not_found off;
            access_log off;
            expires 30d;
            add_header Content-Type text/plain;
        }
        
        # Custom error pages
        error_page 400 401 403 404 /error.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Status server for monitoring
    server {
        listen 8080;
        server_name localhost;
        access_log off;
        
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        location /health {
            return 200 "nginx is healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Include additional server configurations
    include /etc/nginx/conf.d/*.conf;
}